//= depend_on_asset "cv.html"
//= depend_on_asset "job.html"
//= depend_on_asset "partials/signupform.html"
//= depend_on_asset "modal/window.html"
//= depend_on_asset "modal/backdrop.html"
//= depend_on_asset "popover/popover.html"
//= depend_on_asset "datepicker/datepicker.html"
//= depend_on_asset "datepicker/day.html"
//= depend_on_asset "datepicker/month.html"
//= depend_on_asset "datepicker/popup.html"
//= depend_on_asset "datepicker/year.html"

(function(){
  'use strict';

  var app = angular.module('worklist',
    ['Devise', 'ngRoute', 'ngCookies', 'worklist.directives','worklist.services',
      'ui.bootstrap.modal','ui.bootstrap.popover', 'ui.bootstrap.datepicker', 'ui.sortable']);

  app.config(['$routeProvider', '$provide', function($routeProvider, $provide) {
    $provide.decorator('datepickerPopupWrapDirective', function($delegate) {
      $delegate[0].templateUrl = '<%= asset_path("datepicker/popup.html") %>';

      return $delegate;
    });
    $provide.decorator('datepickerDirective', function($delegate) {
      $delegate[0].templateUrl = '<%= asset_path("datepicker/datepicker.html") %>';
      $delegate[0].templateUrl = '<%= asset_path("datepicker/day.html") %>';
      $delegate[0].templateUrl = '<%= asset_path("datepicker/month.html") %>';
      $delegate[0].templateUrl = '<%= asset_path("datepicker/year.html") %>';

      return $delegate;
    });
    $provide.decorator('modalWindowDirective', function($delegate) {
      $delegate[0].templateUrl = '<%= asset_path("modal/window.html") %>';
      return $delegate;
    });
    $provide.decorator('modalBackdropDirective', function($delegate) {
      $delegate[0].templateUrl = '<%= asset_path("modal/backdrop.html") %>';
      return $delegate;
    });
    $provide.decorator('popoverPopupDirective', function($delegate) {
      $delegate[0].templateUrl = '<%= asset_path("popover/popover.html") %>';
      return $delegate;
    });
    $routeProvider
    .when('/', {
      controller: 'EditCtrl',
      templateUrl: '<%= asset_path("cv.html") %>'
    })
    .otherwise({ redirectTo: '/'});
  }]);

  app.controller('EditCtrl', ['Auth','$scope','WorkList','WorkListLinker','$modal',
                 'PreAuth','Cookie','User','$window',
                 function( Auth, $scope, WorkList, WorkListLinker, $modal, PreAuth,
                          Cookie, User, $window ){
    $scope.showSignUp = false;
    $scope.showSignIn = false;
    $scope.showSignOut = false;

    $scope.addSection = function( section ){
      //get the first object
      var sectionArr = $scope.worklist.worklist[section + 's_attributes'];
          // sectionObj = angular.copy( sectionArr[0] );

      sectionArr.push( {display_order: sectionArr[sectionArr.length - 1] } );
    };

    $scope.sortableJobsOptions = function sortableJobsOptions(){
      return {
        stop: function(e, ui){
          $scope.$broadcast('sortJobsEvent');
        }
      }
    }
    $scope.$on('sortJobsEvent', function(e){
      var displayIndex = 0;
      var jobs = $scope.worklist.worklist.jobs_attributes;
      angular.forEach(jobs, function(el){
        el.display_order = displayIndex;
        displayIndex++;
      });
    });

    $scope.sortableJobsOptions = function sortableJobsOptions(){
      return {
        stop: function(e, ui){
          $scope.$broadcast('sortJobsEvent');
        }
      }
    }
    $scope.$on('sortJobsEvent', function(e){
      var displayIndex = 0;
      var jobs = $scope.worklist.worklist.jobs_attributes;
      angular.forEach(jobs, function(el){
        el.display_order = displayIndex;
        displayIndex++;
      });
    });

    $scope.sortableSkillsOptions = function sortableSkillsOptions(){
      return {
        stop: function(e, ui){
          $scope.$broadcast('sortSkillsEvent');
        }
      }
    }
    $scope.$on('sortSkillsEvent', function(e){
      var displayIndex = 0;
      var skills = $scope.worklist.worklist.skills_attributes;
      angular.forEach(skills, function(el){
        el.display_order = displayIndex;
        displayIndex++;
      });
    });

    $scope.sortableQualificationsOptions = function sortableJobSkillsOptions(){
      return {
        stop: function(e, ui){
          $scope.$broadcast('sortQualificationsEvent');
        }
      }
    }
    $scope.$on('sortQualificationsEvent', function(e){
      var qualifications = $scope.worklist.worklist.qualifications_attributes;
      $scope.setDisplayOrder(qualifications);
    });

    $scope.setDisplayOrder = function setDisplayOrder(items){
      var displayIndex = 0;
      var items = items
      angular.forEach(items, function(el){
        el.display_order = displayIndex;
        displayIndex++;
      });
    }


    // Works for nested records
    $scope.sortableOptions = function sortableOptions(items){
      return {
        stop: function(e, ui){
          $scope.$broadcast('sortEvent', [, items]);
        }
      }
    }

    $scope.$on('sortEvent', function(e, data){
      var data = data;
      var displayIndex = 0;
      var items = data[1];

      angular.forEach(items, function(el){
        el.display_order = displayIndex;
        displayIndex++;
      });
    });

    function assignDisplayOrder(e) {
    }

    function worklistSignature() {
      return {url: Cookie.getItem("url"), url_key: Cookie.getItem("url_key")};
    }

    function hasWorklistSignature() {
      if((Cookie.getItem("url") !== null) && (Cookie.getItem("url_key") !== null) ) {
        return true;
      } else {
        return false;
      }
    }

    function fetchWorklist() {
      var url = Cookie.getItem("url");
      var worklist = null;

      $scope.$on('devise:unauthorized', function(event, xhr) {
        if(typeof url === 'undefined' || url === null ){
          $scope.worklist = new PreAuth( window.worklist_data );
        } else {
          $scope.worklist = new PreAuth.get(worklistSignature());
        }
      });

      Auth.currentUser().then(function(user){
        $scope.showSignOut = true;
        $scope.worklist = new WorkList.get({url:url});
      });

    }

    //we're either returning a new resource or a promise (WorkList.get)
    fetchWorklist();

    $scope.saveWorkList = function saveWorkList() {

      if(typeof $scope.worklist.worklist.url === 'undefined'){
        $scope.worklist.$save(function(data){
          $scope.showSignUpForm();
        });
      } else {
        $scope.worklist.$update(worklistSignature());
      }
    };

    $scope.signIn = function signIn(){
      $scope.$on('devise:unauthorized', function(event, xhr, deferred) {
        alert(xhr.data.error);
      });
      var sign_in_params = {
        email: $scope.user.email,
        password: $scope.user.password
      }
      Auth.login(sign_in_params).then(function(user) {
      }).then(function(response){
        $scope.signedIn = true;
        $scope.showSignIn = false;
        $scope.showSignOut = true;
        $scope.signInModal.close();
        $window.location = '/';
      }, function(error) {
        console.log(error);
        alert(error);
      });
    };

    $scope.signUp = function signUp() {
      //
      $scope.user.password_confirmation = $scope.user.password;
      var user = new User({user:$scope.user});
      Auth.register($scope.user).then(function(registeredUser){
        if(hasWorklistSignature()){
          $scope.linker = new WorkListLinker(worklistSignature());
          $scope.linker.$link(worklistSignature());
        }
        $scope.signUpModal.close();
        $scope.showSignOut = true;
      }, function(errors){
        $scope.sigupErrors = errors.data.errors;
      });
    }

    $scope.close = function close(){
      $scope.showSignUp = $scope.showSignIn = false;
    }

    $scope.removeSection = function(section, object){
        $scope.remover($scope.worklist.worklist, section, object);
    };

    $scope.remover = function(object, section, child) {
        var sectionArr = object[section + 's_attributes'];
        var childIndex = sectionArr.indexOf(child);
        if(typeof $scope.worklist.worklist.url === 'undefined' || typeof sectionArr[childIndex] === 'undefined'){
            sectionArr.splice( childIndex, 1 );
        } else {
            sectionArr[childIndex]['_destroy'] = '1';
        }
    }

    $scope.removeJob = function removeJob(jobIndex){
      var jobAttrs = $scope.worklist.worklist.jobs_attributes[jobIndex];
      jobAttrs['_destroy'] = '1';
    };

    // JOB SKILL
    $scope.removeJobSkill = function removeSkill(job,skill){
      var jobIndex = $scope.worklist.worklist.jobs_attributes.indexOf(job);
      $scope.remover($scope.worklist.worklist.jobs_attributes[jobIndex], 'skill', skill);
    };

    $scope.addJobSkill = function addJobSkill(job){
      var jobs = $scope.worklist.worklist.jobs_attributes;
      var jobIndex = jobs.indexOf(job);
      var skills   = jobs[jobIndex].skills_attributes;

      if(typeof skills === 'undefined') {
        skills = [];
      }
      skills.push({display_order: skills[skills.length - 1] });
    }

    // JOB EXPERIENCE
    $scope.removeJobExperience = function removeExperience(job,experience){
      var jobs     = $scope.worklist.worklist.jobs_attributes;
      var jobIndex = $scope.worklist.worklist.jobs_attributes.indexOf(job);

      $scope.remover(jobs[jobIndex], 'experience', experience);
    };

    // display_order
    $scope.addJobExperience = function addJobExperience(job){
      var jobs        = $scope.worklist.worklist.jobs_attributes;
      var jobIndex    = jobs.indexOf(job);
      var experiences = jobs[jobIndex].experiences_attributes;

      if(typeof experiences === 'undefined') {
        experiences = [];
      }
      experiences.push({display_order: experiences[experiences.length - 1] });
    }

    $scope.addKeySkill = function addSkill(){
      var keySkills = $scope.worklist.worklist.skills_attributes;
      keySkills.push({ display_order: keySkills[keySkills.length] });
    }

    $scope.removeKeySkill = function remove(keySkill){
      $scope.remover($scope.worklist.worklist, 'skill', keySkill);
    }

    $scope.actuallyDelete = function deleteWL(){
      //remove the cookie
      Cookie.removeItem('url');
      Cookie.removeItem('url_key');
      //delete
      $scope.worklist.$delete(function(){
        //reload the page
        $window.location = '/';
      });

    }

    $scope.deleteWorkList = function deleteWorklist(){
      $modal.open({
        scope: $scope,
        templateUrl: '<%= asset_path("delete.html") %>',
        controller: function signupModalCtrl($scope, $modalInstance){
          $scope.closeModal = function close(){
            $modalInstance.dismiss('cancel');
          },

          $scope.doDelete = function(){
            $modalInstance.dismiss('cancel');
            $scope.actuallyDelete();
          }
        }
      });
    };

    $scope.showSignUpForm = function() {
      $scope.signUpModal = $modal.open({
        templateUrl: '<%= asset_path("signup.html") %>',
        scope: $scope,
        controller: function signupModalCtrl($scope, $modalInstance){
          $scope.closeModal = function close(){
            $modalInstance.dismiss('cancel');
          }
        }
      });

      $scope.signUpModal.result.then(function(){}, function(){
        $window.location = '/';
      })

    };

    $scope.signOut = function signOut(){
      Auth.logout().then(function(oldUser) {
        $scope.showSignOut = false;
      }, function(error) {
      });
    }

    $scope.showSignInForm = function(){
      $scope.showSignIn = true;
      $scope.signInModal = $modal.open({
        templateUrl: '<%= asset_path("signin.html") %>',
        scope: $scope,
        controller: function signinModalCtrl($scope, $modalInstance){
          $scope.closeModal = function close(){
            $modalInstance.dismiss('cancel');
          }
        }
      });

      $scope.signInModal.result.then(function(){}, function(){
        $window.location = '/';
      })
    }

    $scope.format = 'MMMM yyyy';
    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1
    };

    $scope.disabled = function(date, mode) {
      return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
    };
  }]);
})();
